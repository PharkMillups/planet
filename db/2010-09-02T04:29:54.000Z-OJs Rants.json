{
  "enclosures": [],
  "title": "Webmachine, ErlyDTL and Riak - Part 1",
  "link": "http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/",
  "pubdate": "2010-09-02T04:29:54.000Z",
  "rfc822": "Wed, 01 Sep 2010 21:29:54 -0700",
  "category": "Databases",
  "guid": "http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/",
  "description": "<style>\nspan.filename\n{\n  font-weight: bold;\n  font-family: Consolas, Courier;\n  font-size: 12px;\n  text-align: right;\n  display: block;\n  margin: 0;\n  padding: 3px;\n  background-color: #e0e0ff;\n}\n</style>\n\n<p><img src=\"http://buffered.io/uploads/2010/09/riak-logo.png\" alt=\"Riak Logo\" style=\"float:left;padding-right:5px;padding-bottom:5px;\"/>It has been a long time coming, but the first post is finally here! This is the first in a series of post, as <a href=\"http://buffered.io/2009/10/31/the-future-is-erlang/\" title=\"The Future is Erlang\">promised a while ago</a>, covering off web development using <a href=\"http://erlang.org/\" title=\"Erlang\">Erlang</a>. This post is the ubiquitous \"get up and running\" post, which aims to get your environment set up so that you can dive in to development. The next post will detail how to handle a basic end-to-end web request.</p>\n<p><img src=\"http://buffered.io/uploads/2010/09/Erlang_logo.png\" width=\"150\" style=\"float:right;margin-left:5px;margin-bottom:5px;\"/>First up, a few things we need to be aware of before we begin:</p>\n<ol>\n<li>The information in this post has only been verified on Linux (<a href=\"http://linuxmint.com/\" title=\"Linux Mint\">Mint</a> to be exact). It <em>should</em> work just fine on Mac OSX. I'm almost certain that it <em>won't</em> work on a Windows machine. So if you're a Windows developer, you'll have to wait for another post down the track which covers off how to get your environment ready to rock.</li>\n<li>We'll be downloading, building and installing <a href=\"http://erlang.org/\" title=\"Erlang\">Erlang</a>, <a href=\"http://github.com/evanmiller/erlydtl\" title=\"ErlyDTL\">ErlyDTL</a>, <a href=\"http://www.basho.com/developers.html#Riak\" title=\"Riak\">Riak</a> and <a href=\"http://www.basho.com/developers.html#Webmachine\" title=\"Webmachine\">Webmachine</a>.</li>\n<li><a href=\"http://www.basho.com/developers.html#Rebar\" title=\"Rebar\">Rebar</a> is the tool we'll be using to handle builds, but I won't be covering it in any depth.</li>\n<li>You will need the latest versions of both <a href=\"http://hg-scm.com/\" title=\"Mercurial\">Mercurial</a> and <a href=\"http://git-scm.com/\" title=\"Git\">Git</a> so make sure they're downloaded and installed before you follow this article.</li>\n<li>We'll be doing <em>some</em> interaction with Riak via <a href=\"http://curl.haxx.se/\" title=\"cURL and libcurl\">curl</a>, so make sure you have it downloaded and installed as well.</li>\n<li>This is intended to be a step-by-step guide targeted at those who are very new to web development in Erlang. This may not be the most ideal set up, nor the best way of doing certain things. I am hoping that those people who are more experienced than I will be able to provide feedback and guidance in areas where I am lacking.</li>\n<li>Over the course of this series I'll be attempting to build an Erlang version of the <a href=\"http://bitbucket.org/OJ/codesmackdown\" title=\"Code Smackdown\">Code Smackdown</a> site that I've been working on here and there with a <a href=\"http://secretgeek.net/\" title=\"secretGeek\">mate of mine</a>. You'll see that the sample application we're working on is called \"csd\" for obvious reasons.</li>\n</ol>\n<p>OK, let's get into it. First up, Erlang. <!--more--></p>\n<h3 id=\"installing_erlang_r14b02\">Installing Erlang R14B02</h3>\n<p>Download and installation is fairly simple. Right now we're not worried about enabling all of the features of Erlang, such as interfacing with Java and providing support for GTK. So the boilerplate functionality is enough. Here are the steps to follow:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog $ wget http://erlang.org/download/otp_src_R14B02.tar.gz\n\n... snip ...\n\n<p>oj@nix ~/blog $ tar -xzf otp_src_R14B02.tar.gz \noj@nix ~/blog $ cd otp_src_R14B02/\noj@nix ~/blog/otp_src_R14B02 $ ./configure </p>\n<p>... snip ...</p>\n<p>oj@nix ~/blog/otp_src_R14B02 $ make</p>\n<p>... snip ...</p>\n<p>oj@nix ~/blog/otp_src_R14B02 $ sudo make install</p>\n<p>... snip ...\n</pre></div></p>\n<p>Done! Let's confirm that it has been set up correctly:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog $ erl\nErlang R14B02 (erts-5.8.3) [source] [64-bit] [smp:2:2] [rq:2] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.8.3  (abort with ^G)\n1&gt; q().\nok\n</pre></div>\n\n<p>Excellent. Next let's get Riak going.</p>\n<h3 id=\"installing_riak_014\">Installing Riak 0.14</h3>\n<p>Considering the power of the software you are about to set up, it is absolutely insane how easy it is to get it running. If any of you have tried to get <a href=\"http://couchdb.apache.org/\" title=\"CouchDB\">CouchDB</a> running you'll no doubt have experienced a few quirks and a bit of pain getting it rolling. Not so with Riak. As mentioned at the start of the article, make sure you have a recent version of <a href=\"http://hg-scm.com/\" title=\"Mercurial\">Mercurial</a> and <a href=\"http://git-scm.com/\" title=\"Git\">Git</a> installed.</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog$ hg --version\nMercurial Distributed SCM (version 1.7.3)\n(see http://mercurial.selenic.com for more information)\n\nCopyright (C) 2005-2010 Matt Mackall and others\nThis is free software; see the source for copying conditions. There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n<p>oj@nix ~/blog$ git --version\ngit version 1.7.3.5</p>\n<p>oj@nix ~/blog $ git clone git://github.com/basho/riak\nCloning into riak...\nremote: Counting objects: 10812, done.\nremote: Compressing objects: 100% (3468/3468), done.\nremote: Total 10812 (delta 7217), reused 10469 (delta 7020)\nReceiving objects: 100% (10812/10812), 8.83 MiB | 729 KiB/s, done.\nResolving deltas: 100% (7217/7217), done.</p>\n<p>oj@nix ~/blog $ cd riak\noj@nix ~/blog/riak $ make\n./rebar get-deps\n==&gt; rel (get-deps)\n==&gt; riak (get-deps)\nPulling cluster_info from {git,&quot;git://github.com/basho/cluster_info&quot;,\n                               {branch,&quot;master&quot;}}\nCloning into cluster_info...\nPulling luwak from {git,&quot;git://github.com/basho/luwak&quot;,{branch,&quot;master&quot;}}\nCloning into luwak...\nPulling riak_kv from {git,&quot;git://github.com/basho/riak_kv&quot;,{branch,&quot;master&quot;}}\nCloning into riak_kv...\nPulling riak_err from {git,&quot;git://github.com/basho/riak_err&quot;,\n                           {branch,&quot;master&quot;}}\nCloning into riak_err...\n==&gt; cluster_info (get-deps)\n==&gt; riak_kv (get-deps)\nPulling riak_core from {git,&quot;git://github.com/basho/riak_core&quot;,\n                            {branch,&quot;master&quot;}}\nCloning into riak_core...\nPulling riakc from {git,&quot;git://github.com/basho/riak-erlang-client&quot;,\n                        {tag,&quot;riakc-1.0.2&quot;}}\nCloning into riakc...\nPulling luke from {git,&quot;git://github.com/basho/luke&quot;,{tag,&quot;luke-0.2.3&quot;}}\nCloning into luke...\nPulling erlang_js from {git,&quot;git://github.com/basho/erlang_js&quot;,\n                            {tag,&quot;erlang_js-0.5.0&quot;}}\nCloning into erlang_js...\nPulling bitcask from {git,&quot;git://github.com/basho/bitcask&quot;,{branch,&quot;master&quot;}}\nCloning into bitcask...\nPulling ebloom from {git,&quot;git://github.com/basho/ebloom&quot;,{branch,&quot;master&quot;}}\nCloning into ebloom...\nPulling eper from {git,&quot;git://github.com/dizzyd/eper.git&quot;,{branch,&quot;master&quot;}}\nCloning into eper...\n==&gt; riak_core (get-deps)\nPulling protobuffs from {git,&quot;git://github.com/basho/erlang_protobuffs&quot;,\n                             {tag,&quot;protobuffs-0.5.1&quot;}}\nCloning into protobuffs...\nPulling basho_stats from {git,&quot;git://github.com/basho/basho_stats&quot;,&quot;HEAD&quot;}\nCloning into basho_stats...\nPulling riak_sysmon from {git,&quot;git://github.com/basho/riak_sysmon&quot;,\n                              {branch,&quot;master&quot;}}\nCloning into riak_sysmon...\nPulling webmachine from {git,&quot;git://github.com/basho/webmachine&quot;,\n                             {tag,&quot;webmachine-1.8.0&quot;}}\nCloning into webmachine...\n==&gt; protobuffs (get-deps)\n==&gt; basho_stats (get-deps)\n==&gt; riak_sysmon (get-deps)\n==&gt; webmachine (get-deps)\nPulling mochiweb from {git,&quot;git://github.com/basho/mochiweb&quot;,\n                           {tag,&quot;mochiweb-1.7.1&quot;}}\nCloning into mochiweb...\n==&gt; mochiweb (get-deps)\n==&gt; riakc (get-deps)\n==&gt; luke (get-deps)\n==&gt; erlang_js (get-deps)\n==&gt; ebloom (get-deps)\n==&gt; bitcask (get-deps)\n==&gt; eper (get-deps)\n==&gt; luwak (get-deps)\nPulling skerl from {git,&quot;git://github.com/basho/skerl&quot;,{tag,&quot;skerl-1.0.1&quot;}}\nCloning into skerl...\n==&gt; skerl (get-deps)\n==&gt; riak_err (get-deps)\n./rebar compile\n==&gt; cluster_info (compile)\nCompiled src/cluster_info_ex.erl</p>\n<p>... snip ...\n</pre></div></p>\n<p>I snipped a lot of the make output for obvious reasons. Let's build a few development nodes of Riak and cluster them together as indicated in the <a href=\"https://wiki.basho.com/display/RIAK/The+Riak+Fast+Track\" title=\"Riak Fast Track\">Riak Fast Track</a>:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog/riak $ make devrel\nmkdir -p dev\n(cd rel &amp;&amp; ../rebar generate target_dir=../dev/dev1 overlay_vars=vars/dev1_vars.config)\n==&gt; rel (generate)\nmkdir -p dev\n(cd rel &amp;&amp; ../rebar generate target_dir=../dev/dev2 overlay_vars=vars/dev2_vars.config)\n==&gt; rel (generate)\nmkdir -p dev\n(cd rel &amp;&amp; ../rebar generate target_dir=../dev/dev3 overlay_vars=vars/dev3_vars.config)\n==&gt; rel (generate)\n\noj@nix ~/blog/riak $ cd dev\noj@nix ~/blog/riak/dev $ dev1/bin/riak start\noj@nix ~/blog/riak/dev $ dev2/bin/riak start\noj@nix ~/blog/riak/dev $ dev3/bin/riak start\noj@nix ~/blog/riak/dev $ dev2/bin/riak-admin join dev1\nSent join request to dev1\n\n<p>oj@nix ~/blog/riak/dev $ dev3/bin/riak-admin join dev1\nSent join request to dev1</p>\n<p>oj@nix ~/blog/riak/dev $ curl -H &quot;Accept: text/plain&quot; http://127.0.0.1:8091/stats\n{\n  ... snip ...</p>\n<p>&quot;nodename&quot;: &quot;dev1@127.0.0.1&quot;,\n    &quot;connected_nodes&quot;: [\n    &quot;dev2@127.0.0.1&quot;,\n    &quot;dev3@127.0.0.1&quot;\n  ],</p>\n<p>... snip ...</p>\n<p>&quot;ring_members&quot;: [\n    &quot;dev1@127.0.0.1&quot;,\n    &quot;dev2@127.0.0.1&quot;,\n    &quot;dev3@127.0.0.1&quot;\n  ],\n  &quot;ring_num_partitions&quot;: 64,\n  &quot;ring_ownership&quot;: &quot;[{&#39;dev3@127.0.0.1&#39;,21},{&#39;dev2@127.0.0.1&#39;,21},{&#39;dev1@127.0.0.1&#39;,22}]&quot;,</p>\n<p>... snip ...\n}\n</pre></div></p>\n<p>As we can see from the curl output, we now have a 3-node Riak cluster up and running. Those three nodes have the following traits:\n<table border=\"1\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Protobuf Port</th>\n      <th>HTTP Port</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>dev1@127.0.0.1</td>\n      <td>8081</td>\n      <td>8091</td>\n    </tr>\n    <tr>\n      <td>dev2@127.0.0.1</td>\n      <td>8082</td>\n      <td>8092</td>\n    </tr>\n    <tr>\n      <td>dev3@127.0.0.1</td>\n      <td>8083</td>\n      <td>8093</td>\n    </tr>\n  </tbody>\n</table>\nWe can talk to any of these nodes and they will replicate their data to the other nodes. Nifty! Now that we have a Riak cluster running for development, let's get Webmachine ready.</p>\n<h3 id=\"installing_webmachine_08\">Installing Webmachine 0.8</h3>\n<p>Again, the process is very simple:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog $ git clone git://github.com/basho/webmachine\nloning into webmachine...\nremote: Counting objects: 1183, done.\nremote: Compressing objects: 100% (484/484), done.\nremote: Total 1183 (delta 735), reused 1063 (delta 668)\nReceiving objects: 100% (1183/1183), 1.17 MiB | 294 KiB/s, done.\nResolving deltas: 100% (735/735), done.\n\noj@nix ~/blog $ cd webmachine/\noj@nix ~/blog/webmachine $ make\n==&gt; webmachine (get-deps)\nPulling mochiweb from {git,&quot;git://github.com/mochi/mochiweb&quot;,{tag,&quot;1.5.1&quot;}}\nCloning into mochiweb...\n==&gt; mochiweb (get-deps)\n==&gt; mochiweb (compile)\nCompiled src/mochiglobal.erl\nCompiled src/mochiweb_sup.erl\n\n<p>... snip ...\n</pre></div></p>\n<p>As you can see, Webmachine sits on top of the <a href=\"http://github.com/mochi/mochiweb\" title=\"Mochiweb\">Mochiweb</a> web server.</p>\n<p>To create our own application which sits on top of Webmachine, we can utilise the <code>new_webmachine.sh</code> script. So let's do that to create our Code Smackdown (csd) site:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog/webmachine $ scripts/new_webmachine.sh\nusage: new_webmachine.sh name [destdir]\noj@nix ~/blog/webmachine $ scripts/new_webmachine.sh csd ..\n==&gt; priv (create)\nWriting /home/oj/blog/csd/README\nWriting /home/oj/blog/csd/Makefile\nWriting /home/oj/blog/csd/rebar.config\nWriting /home/oj/blog/csd/rebar\nWriting /home/oj/blog/csd/start.sh\nWriting /home/oj/blog/csd/src/csd.app.src\nWriting /home/oj/blog/csd/src/csd.erl\nWriting /home/oj/blog/csd/src/csd_app.erl\nWriting /home/oj/blog/csd/src/csd_sup.erl\nWriting /home/oj/blog/csd/src/csd_resource.erl\nWriting /home/oj/blog/csd/priv/dispatch.conf\n</pre></div>\n\n<p>Webmachine generates a fully functional website out of the box. So we should be able to build it, fire it up and see it in action:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog/webmachine $ cd ../csd\noj@nix ~/blog/csd $ make\n==&gt; csd (get-deps)\nPulling webmachine from {git,&quot;git://github.com/basho/webmachine&quot;,&quot;HEAD&quot;}\nCloning into webmachine...\n==&gt; webmachine (get-deps)\nPulling mochiweb from {git,&quot;git://github.com/mochi/mochiweb&quot;,{tag,&quot;1.5.1&quot;}}\nCloning into mochiweb...\n==&gt; mochiweb (get-deps)\n==&gt; mochiweb (compile)\nCompiled src/mochiglobal.erl\n\n... snip ...\n\n<p>oj@nix ~/blog/csd $ ./start.sh\nErlang R14B02 (erts-5.8.3) [source] [64-bit] [smp:2:2] [rq:2] [async-threads:0] [hipe] [kernel-poll:false]</p>\n<p>... snip ...</p>\n<p>PROGRESS REPORT==== 3-Apr-2011::22:38:36 ===\n          supervisor: {local,csd_sup}\n             started: [{pid,&lt;0.76.0&gt;},\n                       {name,webmachine_mochiweb},\n                       {mfargs,\n                           {webmachine_mochiweb,start,\n                               [[{ip,&quot;0.0.0.0&quot;},\n                                 {port,8000},\n                                 {log_dir,&quot;priv/log&quot;},\n                                 {dispatch,[{[],csd_resource,[]}]}]]}},\n                       {restart_type,permanent},\n                       {shutdown,5000},\n                       {child_type,worker}]</p>\n<p>=PROGRESS REPORT==== 3-Apr-2011::22:38:36 ===\n         application: csd\n          started_at: nonode@nohost\n</pre></div></p>\n<p>The application is now up and running. As you can see from the output, our csd application has been fired up and is listening on port 8000. Let's fire it up in a web browser to see if it works.</p>\n<img src=\"http://buffered.io/uploads/2010/09/wm_default.png\"/>\n\n<p>It's alive! We're almost done. Before we finish up, let's get set up our build to include some dependencies.</p>\n<h3 id=\"adding_erlydtl_and_riak_client_dependencies\">Adding ErlyDTL and Riak Client Dependencies</h3>\n<p>Rebar makes this bit a walk in the park (thanks <a href=\"http://dizzyd.com/\" title=\"Gradual Epiphany\">Dave</a>, you rock!). Just make sure you stop your Webmachine node before continuing by typing <code>q().</code> into your Erlang console.</p>\n<p>The <code>rebar.config</code> file is what drives rebar's dependency mechanism. We need to open this file and add the entries we need to include in our application. Webmachine's <code>start.sh</code> script by default includes all of the dependencies on start up, so after modifying the configuration, we don't have to do anything else (other than use the library of course).</p>\n<p>Open up <code>rebar.config</code> in your <a href=\"http://www.vim.org/\" title=\"VIM\">favourite editor</a>, it should look something like this:</p>\n<p><span class=\"filename\">rebar.config</span></p>\n<div class=\"pygments_murphy\"><pre><span class=\"c\">%%-*- mode: erlang -*-</span>\n\n<p><span class=\"p\">{</span><span class=\"n\">deps</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"n\">webmachine</span><span class=\"p\">,</span> <span class=\"s\">&quot;1.8.*&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">git</span><span class=\"p\">,</span> <span class=\"s\">&quot;git://github.com/basho/webmachine&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;HEAD&quot;</span><span class=\"p\">}}]}.</span>\n</pre></div></p>\n<p>Edit the file so that it includes both ErlyDTL and the Riak Client:</p>\n<p><span class=\"filename\">rebar.config</span></p>\n<div class=\"pygments_murphy\"><pre><span class=\"c\">%%-*- mode: erlang -*-</span>\n<span class=\"p\">{</span><span class=\"n\">deps</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"n\">webmachine</span><span class=\"p\">,</span> <span class=\"s\">&quot;1.8.*&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">git</span><span class=\"p\">,</span> <span class=\"s\">&quot;git://github.com/basho/webmachine&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;HEAD&quot;</span><span class=\"p\">}},</span>\n    <span class=\"p\">{</span><span class=\"n\">riakc</span><span class=\"p\">,</span> <span class=\"s\">&quot;.*&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">git</span><span class=\"p\">,</span> <span class=\"s\">&quot;git://github.com/basho/riak-erlang-client&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;HEAD&quot;</span><span class=\"p\">}},</span>\n    <span class=\"p\">{</span><span class=\"n\">erlydtl</span><span class=\"p\">,</span> <span class=\"s\">&quot;0.6.1&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">git</span><span class=\"p\">,</span> <span class=\"s\">&quot;git://github.com/OJ/erlydtl.git&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;HEAD&quot;</span><span class=\"p\">}}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}.</span>\n</pre></div>\n\n<p>You'll notice that the <code>erlydtl</code> reference points at my own fork of the ErlyDTL project. This is because I have made it compile cleanly with rebar so that any dependent projects are also able to be build with rebar. Feel free to use your own fork if you like, but mine is there if you can't be bothered :)</p>\n<p>Save the file and build!</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog/csd $ make\n==&gt; mochiweb (get-deps)\n==&gt; webmachine (get-deps)\n==&gt; csd (get-deps)\nPulling riakc from {git,&quot;git://github.com/basho/riak-erlang-client&quot;,&quot;HEAD&quot;}\nCloning into riakc...\nPulling erlydtl from {git,&quot;git://github.com/OJ/erlydtl.git&quot;,&quot;HEAD&quot;}\nCloning into erlydtl...\n==&gt; riakc (get-deps)\nPulling protobuffs from {git,&quot;git://github.com/basho/erlang_protobuffs&quot;,\n                             {tag,&quot;protobuffs-0.5.1&quot;}}\nCloning into protobuffs...\n==&gt; protobuffs (get-deps)\n==&gt; erlydtl (get-deps)\n==&gt; mochiweb (compile)\n==&gt; webmachine (compile)\n==&gt; protobuffs (compile)\nCompiled src/pokemon_pb.erl\nCompiled src/protobuffs_parser.erl\n\n... snip ...\n</pre></div>\n\n<p>Dependencies sorted. For the final part of this blog post, we'll include a basic ErlyDTL template and use it to render the page so we can see how it works.</p>\n<h3 id=\"rendering_an_erlydtl_template\">Rendering an ErlyDTL Template</h3>\n<p>Rebar has built-in support for the compilation of ErlyDTL templates. It can be configured to behave how you want it to, but out of the box it...</p>\n<ul>\n<li>... looks for <code>*.dtl</code> files in the <code>./templates</code> folder</li>\n<li>... compiles each of the found templates into a module called <code>filename_dtl</code> (eg. <code>base.dtl</code> becomes the module base_dtl)</li>\n<li>... puts the module beam files into the <code>ebin</code> directory</li>\n</ul>\n<p>Very handy. Let's create a very simple template by creating a <code>templates</code> folder, and editing a new file in that folder called <code>sample.dtl</code></p>\n<p><span class=\"filename\">templates/sample.dtl</span></p>\n<div class=\"pygments_murphy\"><pre><span class=\"nt\">&lt;html&gt;&lt;body&gt;</span>Hello from inside ErlyDTL. You passed in {{ param }}.<span class=\"nt\">&lt;/body&gt;&lt;/html&gt;</span>\n</pre></div>\n\n<p>Then open up <code>src/csd_resource.erl</code> and search for the <code>to_html()</code> function. It should look like this:</p>\n<p><span class=\"filename\">src/csd_resource.erl</span></p>\n<div class=\"pygments_murphy\"><pre><span class=\"nf\">to_html</span><span class=\"p\">(</span><span class=\"nv\">ReqData</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"s\">&quot;&lt;html&gt;&lt;body&gt;Hello, new world&lt;/body&gt;&lt;/html&gt;&quot;</span><span class=\"p\">,</span> <span class=\"nv\">ReqData</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">}.</span>\n</pre></div>\n\n<p>Modify it to look like this:</p>\n<p><span class=\"filename\">src/csd_resource.erl</span></p>\n<div class=\"pygments_murphy\"><pre><span class=\"nf\">to_html</span><span class=\"p\">(</span><span class=\"nv\">ReqData</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Content</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">sample_dtl</span><span class=\"p\">:</span><span class=\"n\">render</span><span class=\"p\">([{</span><span class=\"n\">param</span><span class=\"p\">,</span> <span class=\"s\">&quot;Slartibartfast&quot;</span><span class=\"p\">}]),</span>\n    <span class=\"p\">{</span><span class=\"nv\">Content</span><span class=\"p\">,</span> <span class=\"nv\">ReqData</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">}.</span>\n</pre></div>\n\n<p>For now, don't worry about the content of this file. I will cover this off in a future post.</p>\n<p>In the past, we had to manually modify <code>ebin/csd.app</code> to include the template that we've just created. Thankfully, <code>rebar</code> has been updated so that it generates the <code>ebin/csd.app</code> file from the <code>src/csd.app.src</code> file automatically when the application is built. <code>rebar</code> adds the required modules from the <code>src</code> folder <em>and</em> includes the templates from the <code>templates</code> folder. Therefore, with our template and module ready to go, all we need to do is build and run:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog/csd $ make\n==&gt; mochiweb (get-deps)\n==&gt; webmachine (get-deps)\n==&gt; protobuffs (get-deps)\n==&gt; riakc (get-deps)\n==&gt; erlydtl (get-deps)\n==&gt; csd (get-deps)\n==&gt; mochiweb (compile)\n==&gt; webmachine (compile)\n==&gt; protobuffs (compile)\n==&gt; riakc (compile)\n==&gt; erlydtl (compile)\n==&gt; csd (compile)\nCompiled src/csd_resource.erl\nCompiled templates/sample.dtl\n\noj@nix ~/blog/csd $ ./start.sh \nErlang R14B02 (erts-5.8.3) [source] [64-bit] [smp:2:2] [rq:2] [async-threads:0] [hipe] [kernel-poll:false]\n\n<p>... snip ...</p>\n<p>** Found 0 name clashes in code paths </p>\n<p>... snip ...</p>\n<p>=PROGRESS REPORT==== 3-Apr-2011::22:54:50 ===\n         application: csd\n          started_at: nonode@nohost\n</pre></div></p>\n<p>Notice how ErlyDTL outputs some information to indicate that no template names have clashed with any other modules.</p>\n<p>The application is now running, let's see what it looks like:</p>\n<img src=\"http://buffered.io/uploads/2010/09/wm_erlydtl.png\"/>\n\n<h3 id=\"the_end\">The End</h3>\n<p>We now have a working environment in which to do our development. In the next post, I'll cover some of the basics required to get Webmachine talking to Riak via <a href=\"http://en.wikipedia.org/wiki/Protocol_Buffers\" title=\"Protocol Buffers\">Protocol Buffers</a>.</p>\n<p>Feedback and criticism welcome!</p>\n<p><strong>Note:</strong> The code for Part 1 (this post) can be found <a href=\"https://bitbucket.org/OJ/csd/src/716be7603ad7\" title=\"Source Code for Part 1\">on my Bitbucket account</a>.</p>",
  "isoTimestamp": "2010-09-02T04:29:54.000Z",
  "_id": "2010-09-02T04:29:54.000Z-OJs Rants",
  "site": {
    "feed": "http://buffered.io/feed/index.xml",
    "author": "OJ Reeves",
    "link": "http://buffered.io/"
  },
  "displayDate": "Sep 1 2010"
}