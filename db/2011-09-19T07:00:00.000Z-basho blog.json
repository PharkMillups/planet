{
  "entry": "\n   ",
  "title": "Riak Pipe - the New MapReduce Power",
  "link": "http://blog.basho.com/2011/09/19/Riak-Pipe-The-New-Map-Reduce-Power",
  "guid": "http://blog.basho.com/2011/09/19/Riak-Pipe-The-New-Map-Reduce-Power",
  "updated": "2011-09-19T00:00:00+00:00",
  "pubdate": "2011-09-19T07:00:00.000Z",
  "rfc822": "Mon, 19 Sep 2011 00:00:00 -0700",
  "id": "http://blog.basho.com/2011/09/19/Riak-Pipe-The-New-Map-Reduce-Power",
  "description": "<strong>September 19, 2011</strong>\n\n<p>A few months ago,\nI <a href=\"http://lists.basho.com/pipermail/riak-users_lists.basho.com/2011-June/004550.html\">announced</a>\nthe opening of <a href=\"http://github.com/basho/riak_pipe\">Riak\nPipe</a>, as well as two goals for the project.  With the upcoming 1.0\nrelease of Riak, we have achieved the first goal: new clusters will\nuse Riak Pipe to power their MapReduce processing.  Existing clusters\nwill also be able to migrate to using Riak Pipe, with no changes\nneeded from the client perspective.</p>\n\n<p>There are a few reasons you should be excited about running your\nMapReduce queries on Riak Pipe.  First and foremost, Riak Pipe is\ndesigned as a work distribution system, and as such, <strong>it is\nbetter able to take advantage of the parallel resources available in\nthe cluster</strong>.  One small example of how Riak Pipe achieves\nthis is simply by splitting the &ldquo;map&rdquo; phase processing\ninto two steps: fetching the object from Riak KV, and transforming it.\nThis allows the work of each step to happen in parallel; the next\ninput will be fetched while the transformation of the last one is in\nprogress.</p>\n\n<p>Riak Pipe also recognizes that a cluster's resources are finite,\nand that sometimes it's better to delay one pile of work in order to\nmake progress on another.  Processing phases in Riak Pipe,\ncalled <em>fittings</em>, provide <strong>backpressure to fittings\nupstream</strong> from them by means of limiting the sizes of their\ninput queues.  The upstream fittings pause their processing when the\ndownstream queues are full, <strong>freeing up system\nresources</strong> (or at least not increasing their consumption) to\nallow those downstream processes a chance to catch up.</p>\n\n<p>Input queues are another example of Riak Pipe's parallel resource\nuse.  <strong>Inter-phase results are delivered directly</strong> from\na vnode running one stage to the vnode that will process them for the\nnext stage.  Since they are <strong>not forced through a single,\ncentral process</strong>, the memory of the entire cluster can be used\nto move them around, instead of requiring a single machine's memory to\nhandle them.</p>\n\n<p>The KV-object fetching stage of the new Riak Pipe MapReduce system\nis also <strong>much more of a well-behaved KV user</strong>.  That\nis, the requests it makes are much more fairly balanced with respect\nto regular Riak KV operations (get, put, etc.).  This means MapReduce\non Riak Pipe should have <strong>much less impact on the\nperformance</strong> of rest of your Riak use.</p>\n\n<p>Using Riak Pipe MapReduce is simple.  Make sure that the\nsetting <code>{mapred_system, pipe}</code> is in\nthe <code>riak_kv</code> section of your\ncluster's <code>app.config</code>, and then &hellip; just send\nMapReduce queries over HTTP or Protocol Buffers as you always have.\nThe results should be the same.  There are a few knobs you can tweak,\nwhich control batching of reduce phase evaluation, but the goal of\nthis release was a <strong>100% compatible implementation of the\nexisting MapReduce functionality</strong>.</p>\n\n<p>There is much more on the horizon for Riak Pipe, including more\nefficiency gains and exposing some of the new processing statistics it\ntracks, not to mention exposing more of its functionality beyond Riak\nKV's MapReduce.  We're very excited about the future.</p>\n\n<p>If you would like to learn more about Riak Pipe, in general, and\nget involved, I recommend paging through\n<a href=\"https://github.com/basho/riak_pipe/blob/master/README.org\">\nthe README</a> to get an idea of its structure, and then browsing\n<a href=\"https://github.com/basho/riak_kv/blob/master/src/riak_kv_mrc_pipe.erl\">\nthe new Riak KV MapReduce code</a> for some examples.</p>\n\n<p>-<a href=\"http://twitter.com/hobbyist\">Bryan</a></p>",
  "isoTimestamp": "2011-09-19T07:00:00.000Z",
  "_id": "2011-09-19T07:00:00.000Z-basho blog",
  "site": {
    "feed": "http://blog.basho.com/feed/index.xml",
    "author": "Basho Technologies",
    "link": "http://blog.basho.com"
  },
  "displayDate": "Sep 19 2011"
}