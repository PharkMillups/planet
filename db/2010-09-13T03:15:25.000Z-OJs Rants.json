{
  "enclosures": [],
  "title": "Webmachine, ErlyDTL and Riak - Part 2",
  "link": "http://buffered.io/2010/09/12/webmachine-erlydtl-and-riak-part-2/",
  "pubdate": "2010-09-13T03:15:25.000Z",
  "rfc822": "Sun, 12 Sep 2010 20:15:25 -0700",
  "category": "Databases",
  "guid": "http://buffered.io/2010/09/12/webmachine-erlydtl-and-riak-part-2/",
  "description": "<style>\nspan.filename\n{\n  font-weight: bold;\n  font-family: Consolas, Courier;\n  font-size: 12px;\n  text-align: right;\n  display: block;\n  margin: 0;\n  padding: 3px;\n  background-color: #e0e0ff;\n}\n</style>\n\n<p><img src=\"http://buffered.io/uploads/2010/09/riak-logo.png\" alt=\"Riak Logo\" style=\"float:left;padding-right:5px;padding-bottom:5px;\"/>In <a href=\"http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/\" title=\"Wembachine, ErlyDTL and Riak - Part 1\">Part 1</a> of the series we covered the basics of getting the development environment up and running. We also looked at how to get a really simple ErlyDTL template rendering. If you haven't yet gone through Part 1, I suggest you do that now. If you have, read on!</p>\n<p>There are a few reasons this series is targeting this technology stack. One of them is <strong>uptime</strong>. We're aiming to build a site that stays up as much as possible. Given that, one of the things that I missed in the previous post was setting up a <a href=\"http://en.wikipedia.org/wiki/Load_balancing_(computing)\" title=\"Load balancing\">load balancer</a>. Hence this post will attempt to fill that gap. <!--more--></p>\n<p>Any serious web-based application will have load-balancing in play somewhere. While not essential during development, it's handy to have a similar set up in the hope that it exposes you to some potential issues you might face when the application reaches production.</p>\n<p>There are many high-quality load-balancing solutions out there to choose from. For this series, we shall be using <a href=\"http://haproxy.1wt.eu/\" title=\"HAProxy\">HAProxy</a>, which is a common choice amongst developers building scalable web applications. The rest of this post will cover how to set up HAProxy, verifying that the configuration is correct and confirming that it behaves appropriately when nodes in our cluster go down.</p>\n<p>Please note the goal is to demonstrate how HAProxy <em>can</em> be configured. When deploying to your production environments please make sure the configuration matches your needs.</p>\n<h3 id=\"haproxy_installation\">HAProxy installation</h3>\n<p>Let's start by pulling down the latest stable version of HAProxy's source, extracting it and building it. Here's a sample log of what you should expect:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog $ wget http://haproxy.1wt.eu/download/1.4/src/haproxy-1.4.14.tar.gz\n\n... snip ...\n\n<p>oj@nix ~/blog $ tar -xzf haproxy-1.4.14.tar.gz </p>\n<p>... snip ...\n</pre></div></p>\n<p>At this point we've got the source and we're ready to make. HAProxy requires a parameter in order to build, and this parameter varies depending on your target system:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog $ cd haproxy-1.4.14\noj@nix ~/blog/haproxy-1.4.14 $ make\n\nDue to too many reports of suboptimized setups, building without\nspecifying the target is no longer supported. Please specify the\ntarget OS in the TARGET variable, in the following form:\n\n<p>make TARGET=xxx</p>\n<p>Please choose the target among the following supported list :</p>\n<p>linux26, linux24, linux24e, linux22, solaris\n   freebsd, openbsd, cygwin, custom, generic</p>\n<p>Use &quot;generic&quot; if you don&#39;t want any optimization, &quot;custom&quot; if you\nwant to precisely tweak every option, or choose the target which\nmatches your OS the most in order to gain the maximum performance\nout of it. Please check the Makefile in case of doubts.\nmake: *** [all] Error 1\n</pre></div></p>\n<p>According to <a href=\"http://en.wikipedia.org/wiki/Uname\" title=\"uname\">uname</a>, I'm running Linux Kernel 2.6:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog/haproxy-1.4.14 $ uname -r\n2.6.31-21-generic\n</pre></div>\n\n<p>As a result, I'll be passing in <strong>linux26</strong>. Make sure you specify the correct option depending on which system you are running. We'll be building it <em>and</em> installing it so that it can be called from anywhere:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog/haproxy-1.4.14 $ make TARGET=linux26\n\n... snip ...\n\n<p>oj@nix ~/blog/haproxy-1.4.14 $ sudo make install</p>\n<p>... snip ...\n</pre></div></p>\n<p>Simple! We now need to create a configuration for HAProxy which we can use during development. Not surprisingly, HAProxy can be run as a daemon, but it can also be invoked from the command line with a configuration passed as a parameter. For our development, we'll be executing from the command line as this will give us feedback/output on what's going on.</p>\n<p>Let's create a file called <code>dev.haproxy.conf</code> inside our application directory so that it can be included in our source:</p>\n<p><span class=\"filename\">dev.haproxy.conf</span></p>\n<div class=\"pygments_murphy\"><pre><span class=\"c\"># start with the global settings which will</span>\n<span class=\"c\"># apply to all sections in the configuration.</span>\nglobal\n  <span class=\"c\"># specify the maximum connections across the board</span>\n  maxconn 2048\n  <span class=\"c\"># enable debug output</span>\n  debug\n\n<span class=\"c\"># now set the default settings for each sub-section</span>\ndefaults\n  <span class=\"c\"># stick with http traffic</span>\n  mode http\n  <span class=\"c\"># set the number of times HAProxy should attempt to</span>\n  <span class=\"c\"># connect to the target</span>\n  retries 3\n  <span class=\"c\"># specify the number of connections per front and</span>\n  <span class=\"c\"># back end</span>\n  maxconn 1024\n  <span class=\"c\"># specify some timeouts (all in milliseconds)</span>\n  timeout connect 5000\n  timeout client 50000\n  timeout server 50000\n\n<p><span class=\"c\">########### Webmachine Configuration ###################</span></p>\n<p><span class=\"c\"># here is the first of the front-end sections.</span>\n<span class=\"c\"># this is where we specify our webmachine instances.</span>\n<span class=\"c\"># in our case we start with just one instance, but</span>\n<span class=\"c\"># we can add more later</span>\nfrontend webfarm\n  <span class=\"c\"># listen on port 80 across all network interfaces</span>\n  <span class=\"nb\">bind</span> *:80\n  <span class=\"c\"># by default, point at our backend configuration</span>\n  <span class=\"c\"># which lists our webmachine instances (this is</span>\n  <span class=\"c\"># configured below in another section)</span>\n  default_backend webmachines</p>\n<p><span class=\"c\"># this section indicates how the connectivity to</span>\n<span class=\"c\"># all the instances of webmachine should work.</span>\n<span class=\"c\"># Again, for dev there is only one instance, but</span>\n<span class=\"c\"># in production there would be more.</span>\nbackend webmachines\n  <span class=\"c\"># we&#39;ll specify a round-robin configuration in</span>\n  <span class=\"c\"># case we add nodes down the track.</span>\n  balance roundrobin\n  <span class=\"c\"># enable the &quot;X-Forware-For&quot; header so that</span>\n  <span class=\"c\"># we can see the client&#39;s IP in Webmachine,</span>\n  <span class=\"c\"># not just the proxy&#39;s address</span>\n  option forwardfor\n  <span class=\"c\"># later down the track we&#39;ll be making the use</span>\n  <span class=\"c\"># of cookies for various reasons. So we&#39;ll</span>\n  <span class=\"c\"># enable support for this while we&#39;re here.</span>\n  cookie SERVERID insert nocache indirect\n  <span class=\"c\"># list the servers who are to be balanced</span>\n  <span class=\"c\"># (just the one in the case of dev)</span>\n  server Webmachine1 127.0.0.1:8000</p>\n<p><span class=\"c\">########### Riak Configuration ###################</span></p>\n<p><span class=\"c\"># We are yet to touch Riak so far, but given that</span>\n<span class=\"c\"># this post is going to cover the basics of</span>\n<span class=\"c\"># connectivity, we&#39;ll cover off the configuration</span>\n<span class=\"c\"># now so we don&#39;t have to do it later.</span>\nfrontend dbcluster\n  <span class=\"c\"># We&#39;ll be using protocol buffers to talk to</span>\n  <span class=\"c\"># Riak, so we will change from the default mode</span>\n  <span class=\"c\"># and use tcp instead</span>\n  mode tcp\n  <span class=\"c\"># we&#39;re only interested in allowing connections</span>\n  <span class=\"c\"># from internal sources (so that we don&#39;t expose</span>\n  <span class=\"c\"># ourselves to the web. so we shall only listen</span>\n  <span class=\"c\"># on an internal interface on port 8080</span>\n  <span class=\"nb\">bind </span>127.0.0.1:8080\n  <span class=\"c\"># Default to the riak cluster configuration</span>\n  default_backend riaks</p>\n<p><span class=\"c\"># Here is the magic bit which load balances across</span>\n<span class=\"c\"># our three instances of riak which are clustered</span>\n<span class=\"c\"># together</span>\nbackend riaks\n  <span class=\"c\"># again, make sure we specify tcp instead of</span>\n  <span class=\"c\"># the default http mode</span>\n  mode tcp\n  <span class=\"c\"># use a standard round robin approach for load</span>\n  <span class=\"c\"># balancing</span>\n  balance roundrobin\n  <span class=\"c\"># list the three servers as optional targets</span>\n  <span class=\"c\"># for load balancing - these are what we set</span>\n  <span class=\"c\"># up during Part 1. Add health-checking as</span>\n  <span class=\"c\"># well so that when nodes go down, HAProxy</span>\n  <span class=\"c\"># can remove them from the cluster</span>\n  server Riak1 127.0.0.1:8081 check\n  server Riak2 127.0.0.1:8082 check\n  server Riak3 127.0.0.1:8083 check\n</pre></div></p>\n<p>In the configuration above the <code>backend riaks</code> section has three server nodes. Each one of them has the <code>check</code> option specified. This enables health-checking on the same address and port that the server instance is bound to. If you decided that you didn't want to do health-checking in this manner you easily enable health-checking over HTTP, as Riak has a built-in URI which can be used to validate the state of the node. Change the <code>backend riaks</code> section in the configuration to look like this:</p>\n<div class=\"pygments_murphy\"><pre><span class=\"c\"># Here is the magic bit which load balances across</span>\n<span class=\"c\"># our three instances of riak which are clustered</span>\n<span class=\"c\"># together</span>\nbackend riaks\n  <span class=\"c\"># again, make sure we specify tcp instead of</span>\n  <span class=\"c\"># the default http mode</span>\n  mode tcp\n  <span class=\"c\"># use a standard round robin approach for load</span>\n  <span class=\"c\"># balancing</span>\n  balance roundrobin\n  <span class=\"c\"># enable HTTP health checking using the GET method</span>\n  <span class=\"c\"># on the URI &quot;/ping&quot;. This URI is part of Riak and</span>\n  <span class=\"c\"># can be used to determine if the node is up.</span>\n  <span class=\"c\"># We specify that we want to use the GET action, and</span>\n  <span class=\"c\"># use the URI &quot;/ping&quot; - this is the RESTful health</span>\n  <span class=\"c\"># check URI that comes as part of Riak.</span>\n  option httpchk GET /ping\n  <span class=\"c\"># list the three servers as optional targets</span>\n  <span class=\"c\"># for load balancing - these are what we set</span>\n  <span class=\"c\"># up during Part 1. Add health-checking as</span>\n  <span class=\"c\"># well so that when nodes go down, HAProxy</span>\n  <span class=\"c\"># can remove them from the cluster.</span>\n\n<p><span class=\"c\"># change the health-check address of the node to 127.0.0.0:8091</span>\n  <span class=\"c\"># which is the REST interface for the first Riak node</span>\n  server Riak1 127.0.0.1:8081 check addr 127.0.0.1 port 8091</p>\n<p><span class=\"c\"># change the health-check address of the node to 127.0.0.0:8092</span>\n  <span class=\"c\"># which is the REST interface for the second Riak node</span>\n  server Riak2 127.0.0.1:8082 check addr 127.0.0.1 port 8092</p>\n<p><span class=\"c\"># change the health-check address of the node to 127.0.0.0:8093</span>\n  <span class=\"c\"># which is the REST interface for the third Riak node</span>\n  server Riak3 127.0.0.1:8083 check addr 127.0.0.1 port 8093\n</pre></div></p>\n<p>To make sure this is functioning correctly, we need to open two consoles and change our working directory to our <code>csd</code> application (for those who have forgotten, <code>csd</code> is the application we're building - it was mentioned in <a href=\"http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/\" title=\"Wembachine, ErlyDTL and Riak - Part 1\">Part 1</a>). In console 1:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog/csd $ sudo haproxy -f dev.haproxy.conf -d\nAvailable polling systems :\n     sepoll : pref=400,  test result OK\n      epoll : pref=300,  test result OK\n       poll : pref=200,  test result OK\n     select : pref=150,  test result OK\nTotal: 4 (4 usable), will use sepoll.\nUsing sepoll() as the polling mechanism.\n</pre></div>\n\n<p>This indicates that HAProxy is up and running and waiting for connections. Let's get Webmachine fired up in console 2:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog/csd $ ./start.sh\n\n... snip ...\n\n<p>=PROGRESS REPORT==== 4-Apr-2011::23:39:27 ===\n         application: csd\n          started_at: nonode@nohost\n</pre></div></p>\n<p>Now Webmachine is fired up with our application running. We should be able to hit our page, this time at <a href=\"http://localhost/\" title=\"localhost\">localhost</a>, and see exactly what we saw at the end of <a href=\"http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/\" title=\"Wembachine, ErlyDTL and Riak - Part 1\">Part 1</a>.</p>\n<img src=\"http://buffered.io/uploads/2010/09/haproxy-validation.png\" />\n\n<h3 id=\"verification_of_haproxy_configuration\">Verification of HAProxy configuration</h3>\n<p>On the surface it appears that we haven't broken anything. We also need to make sure that any communication with Riak that we have down the track is also functioning. So let's validate that now.</p>\n<p>First, we have to make sure that Riak is running. If you have followed <a href=\"http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/\" title=\"Wembachine, ErlyDTL and Riak - Part 1\">Part 1</a> already and your Riak cluster is running then you're good to go. If not, please read <a href=\"http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/\" title=\"Wembachine, ErlyDTL and Riak - Part 1\">Part 1</a> for information on how to install Riak and configure it to run as a cluster of 3 nodes.</p>\n<p>Next, let's create 3 new connections and use the <a href=\"https://github.com/basho/riak-erlang-client/blob/master/src/riakc_pb_socket.erl#L181\" title=\"riakc_pb_socket:get_server_info/1\">get_server_info/1</a> function to find out which node we are connected to. To do this, we'll need to use an Erlang console which has all the Riak dependencies ready to go. It just so happens that when we fired up our Webmachine instance, we got an Erlang console for free. Simply hit the <code>enter</code> key and you'll be given a prompt. Notice that when we connect to Riak using the <a href=\"https://github.com/basho/riak-erlang-client/blob/master/src/riakc_pb_socket.erl#L97\" title=\"riakc_pb_socket:start_link/2\">start_link/2</a> function, we are passing in the IP address and port of the load-balanced cluster instead of one of the running Riak nodes:</p>\n<div class=\"pygments_murphy\"><pre><span class=\"mi\">1</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">C1</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">start_link</span><span class=\"p\">(</span><span class=\"s\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">).</span>\n\n<p><span class=\"o\">=</span><span class=\"nv\">PROGRESS</span> <span class=\"nv\">REPORT</span><span class=\"o\">====</span> <span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"nv\">Apr</span><span class=\"o\">-</span><span class=\"mi\">2011</span><span class=\"p\">::</span><span class=\"mi\">23</span><span class=\"p\">:</span><span class=\"mi\">41</span><span class=\"p\">:</span><span class=\"mi\">18</span> <span class=\"o\">===</span>\n          <span class=\"nn\">supervisor</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"n\">inet_gethost_native_sup</span><span class=\"p\">}</span>\n             <span class=\"nn\">started</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"n\">pid</span><span class=\"p\">,</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">148</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">},{</span><span class=\"n\">mfa</span><span class=\"p\">,{</span><span class=\"n\">inet_gethost_native</span><span class=\"p\">,</span><span class=\"n\">init</span><span class=\"p\">,[[]]}}]</span></p>\n<p><span class=\"o\">=</span><span class=\"nv\">PROGRESS</span> <span class=\"nv\">REPORT</span><span class=\"o\">====</span> <span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"nv\">Apr</span><span class=\"o\">-</span><span class=\"mi\">2011</span><span class=\"p\">::</span><span class=\"mi\">23</span><span class=\"p\">:</span><span class=\"mi\">41</span><span class=\"p\">:</span><span class=\"mi\">18</span> <span class=\"o\">===</span>\n          <span class=\"nn\">supervisor</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"n\">kernel_safe_sup</span><span class=\"p\">}</span>\n             <span class=\"nn\">started</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"n\">pid</span><span class=\"p\">,</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">147</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">},</span>\n                       <span class=\"p\">{</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">inet_gethost_native_sup</span><span class=\"p\">},</span>\n                       <span class=\"p\">{</span><span class=\"n\">mfargs</span><span class=\"p\">,{</span><span class=\"n\">inet_gethost_native</span><span class=\"p\">,</span><span class=\"n\">start_link</span><span class=\"p\">,[]}},</span>\n                       <span class=\"p\">{</span><span class=\"n\">restart_type</span><span class=\"p\">,</span><span class=\"n\">temporary</span><span class=\"p\">},</span>\n                       <span class=\"p\">{</span><span class=\"n\">shutdown</span><span class=\"p\">,</span><span class=\"mi\">1000</span><span class=\"p\">},</span>\n                       <span class=\"p\">{</span><span class=\"n\">child_type</span><span class=\"p\">,</span><span class=\"n\">worker</span><span class=\"p\">}]</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">146</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n<span class=\"mi\">2</span><span class=\"o\">&gt;</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">get_server_info</span><span class=\"p\">(</span><span class=\"nv\">C1</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,[{</span><span class=\"nb\">node</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;dev1@127.0.0.1&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span>\n     <span class=\"p\">{</span><span class=\"n\">server_version</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;0.12.0&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">}]}</span>\n<span class=\"mi\">3</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">C2</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">start_link</span><span class=\"p\">(</span><span class=\"s\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">151</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n<span class=\"mi\">4</span><span class=\"o\">&gt;</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">get_server_info</span><span class=\"p\">(</span><span class=\"nv\">C2</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,[{</span><span class=\"nb\">node</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;dev2@127.0.0.1&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span>\n     <span class=\"p\">{</span><span class=\"n\">server_version</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;0.12.0&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">}]}</span>\n<span class=\"mi\">5</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">C3</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">start_link</span><span class=\"p\">(</span><span class=\"s\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">154</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n<span class=\"mi\">6</span><span class=\"o\">&gt;</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">get_server_info</span><span class=\"p\">(</span><span class=\"nv\">C3</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,[{</span><span class=\"nb\">node</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;dev3@127.0.0.1&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span>\n     <span class=\"p\">{</span><span class=\"n\">server_version</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;0.12.0&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">}]}</span>\n</pre></div></p>\n<p>So we can see that the load balancer has allocated three different connections, each to a different node in the cluster. This is a good sign. So let's kill off one of the nodes:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog/riak/dev $ dev2/bin/riak stop\nok\n</pre></div>\n\n<p>In a very short period of time, you should see output in the HAProxy console which looks something like this:</p>\n<div class=\"pygments_murphy\"><pre>[WARNING] 253/235636 (11824) : Server riaks/Riak2 is DOWN, reason: Layer4 connection problem, info: &quot;Connection refused&quot;, check duration: 0ms.\n</pre></div>\n\n<p>The load balancer noticed that the node has died. Let's make sure it no longer attempts to allocate connections to <code>dev2</code>. Note that we call <a href=\"http://www.erlang.org/documentation/doc-5.2/doc/getting_started/getting_started.html\" title=\"Getting started\">f()</a> in our console before running the same script again, as this forces the shell to forget about any existing variable bindings:</p>\n<div class=\"pygments_murphy\"><pre><span class=\"mi\">7</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">().</span>\n<span class=\"n\">ok</span>\n<span class=\"mi\">8</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">C1</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">start_link</span><span class=\"p\">(</span><span class=\"s\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">1951</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n<span class=\"mi\">9</span><span class=\"o\">&gt;</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">get_server_info</span><span class=\"p\">(</span><span class=\"nv\">C1</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,[{</span><span class=\"nb\">node</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;dev1@127.0.0.1&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span>\n     <span class=\"p\">{</span><span class=\"n\">server_version</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;0.12.0&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">}]}</span>\n<span class=\"mi\">10</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">C2</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">start_link</span><span class=\"p\">(</span><span class=\"s\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">1954</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n<span class=\"mi\">11</span><span class=\"o\">&gt;</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">get_server_info</span><span class=\"p\">(</span><span class=\"nv\">C2</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,[{</span><span class=\"nb\">node</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;dev3@127.0.0.1&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span>\n     <span class=\"p\">{</span><span class=\"n\">server_version</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;0.12.0&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">}]}</span>\n<span class=\"mi\">12</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">C3</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">start_link</span><span class=\"p\">(</span><span class=\"s\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">1957</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n<span class=\"mi\">13</span><span class=\"o\">&gt;</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">get_server_info</span><span class=\"p\">(</span><span class=\"nv\">C3</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,[{</span><span class=\"nb\">node</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;dev1@127.0.0.1&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span>\n     <span class=\"p\">{</span><span class=\"n\">server_version</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;0.12.0&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">}]}</span>\n</pre></div>\n\n<p>As we hoped, <code>dev2</code> is nowhere to be seen. Let's fire it up again:</p>\n<div class=\"pygments_murphy\"><pre>oj@nix ~/blog/riak/dev $ dev2/bin/riak start\n</pre></div>\n\n<p><strong>Note:</strong> It isn't necessary to tell the node to rejoin the cluster. This happens automatically. Thanks to Siculars (see comment thread) for pointing that out.</p>\n<p>HAProxy's console will show you that it has re-established a connection to <code>dev2</code></p>\n<div class=\"pygments_murphy\"><pre>[WARNING] 253/235852 (11824) : Server riaks/Riak2 is UP, reason: Layer7 check passed, code: 200, info: &quot;OK&quot;, check duration: 1ms.\n</pre></div>\n\n<p>As a final test, let's make sure we see that node get connections when we attempt to connect:</p>\n<div class=\"pygments_murphy\"><pre><span class=\"mi\">14</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">().</span>\n<span class=\"n\">ok</span>\n<span class=\"mi\">15</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">C1</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">start_link</span><span class=\"p\">(</span><span class=\"s\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">4203</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n<span class=\"mi\">16</span><span class=\"o\">&gt;</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">get_server_info</span><span class=\"p\">(</span><span class=\"nv\">C1</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,[{</span><span class=\"nb\">node</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;dev3@127.0.0.1&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span>\n     <span class=\"p\">{</span><span class=\"n\">server_version</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;0.12.0&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">}]}</span>\n<span class=\"mi\">17</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">C2</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">start_link</span><span class=\"p\">(</span><span class=\"s\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">4206</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n<span class=\"mi\">18</span><span class=\"o\">&gt;</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">get_server_info</span><span class=\"p\">(</span><span class=\"nv\">C2</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,[{</span><span class=\"nb\">node</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;dev1@127.0.0.1&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span>\n     <span class=\"p\">{</span><span class=\"n\">server_version</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;0.12.0&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">}]}</span>\n<span class=\"mi\">19</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">C3</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">start_link</span><span class=\"p\">(</span><span class=\"s\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">4209</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n<span class=\"mi\">20</span><span class=\"o\">&gt;</span> <span class=\"nn\">riakc_pb_socket</span><span class=\"p\">:</span><span class=\"n\">get_server_info</span><span class=\"p\">(</span><span class=\"nv\">C3</span><span class=\"p\">).</span>\n<span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,[{</span><span class=\"nb\">node</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;dev2@127.0.0.1&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span>\n     <span class=\"p\">{</span><span class=\"n\">server_version</span><span class=\"p\">,</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&quot;0.12.0&quot;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">}]}</span>\n</pre></div>\n\n<h3 id=\"wrapping_up\">Wrapping up</h3>\n<p>Excellent. Now that we've got our load-balancer set up in development, we're ready to dive into connecting to Riak from our <code>csd</code> application. That will be the topic for the next post in this series.</p>\n<p>As always, comments and feedback are welcome and greatly appreciated. Suggestions on improvements and pointers on mistakes would be awesome. To anyone out there who has put HAProxy into production, we would love to hear your comments on your configuration!</p>\n<p><strong>Note:</strong> The code for Part 2 (this post) can be found <a href=\"https://bitbucket.org/OJ/csd/src/df62880d12a8\" title=\"Source Code for Part 2\">on my Bitbucket account</a>.</p>",
  "isoTimestamp": "2010-09-13T03:15:25.000Z",
  "_id": "2010-09-13T03:15:25.000Z-OJs Rants",
  "site": {
    "feed": "http://buffered.io/feed/index.xml",
    "author": "OJ Reeves",
    "link": "http://buffered.io/"
  },
  "displayDate": "Sep 12 2010"
}