{
  "entry": "\n   ",
  "title": "What's New In Riak's Python Client?",
  "link": "http://blog.basho.com/2011/08/04/Whats-New-In-Riaks-Python-Client",
  "guid": "http://blog.basho.com/2011/08/04/Whats-New-In-Riaks-Python-Client",
  "updated": "2011-08-04T00:00:00+00:00",
  "pubdate": "2011-08-04T07:00:00.000Z",
  "rfc822": "Thu, 04 Aug 2011 00:00:00 -0700",
  "id": "http://blog.basho.com/2011/08/04/Whats-New-In-Riaks-Python-Client",
  "description": "<p>There's a whole slew of new and noteworthy features in today's release of the\nPython client for Riak, and I thought it'd be a good idea for us to sit down and\nlook at a bunch of them so I can add more detail to what is already in the\nrelease notes.</p>\n\n<h1>Test Server</h1>\n\n<p><a href=\"https://github.com/seancribbs/ripple\">Ripple</a> has had an in-memory test server\nfor a while now, and I thought the Python client should have something similar\ntoo. By the way, a lot of the features here draw heavy inspiration from Ripple\nin general, so credit where credit is due.</p>\n\n<p>The basic idea is that instead of using a locally installed Riak instance with\nfile system storage you use one that stores data in memory instead. This is not\nonly faster than storing everything on disk, it makes it much easier to just\nwipe all the data and start from scratch, without having to restart the service.\nIn short, this is a neat way to integrate Riak into your test suite.</p>\n\n<p>All the test server requires is a local installation to use the libraries from\nand to steal some files to build a second Riak installation in a temporary\ndirectory. Let's look at an example:</p>\n\n<p>This will start a Riak instance in the background, with the Python part\ninteracting with it through the Erlang console. That allows you to do things\nlike wiping all data to have a minty fresh and empty Riak installation for the\nnext test run:</p>\n\n<p>The <code>TestServer</code> class has a default of where to look for a Riak installation,\nbut the path could be anywhere you put a Riak build you made from an official\nrelease archive. Just point it to that Riak installation's bin directory, and\nyou're good to go:</p>\n\n<p>You can also overwrite the default settings used to generate the app.config file\nfor the in-memory Riak instance. Just specify a keyword pointing to a dictionary\nfor every section in the app.config like so:</p>\n\n<p>By default the test server listens on ports 9000 (HTTP) and 9001 (Protocol\nbuffers), so make sure you adapt your test code accordingly.</p>\n\n<h1>Using Riak Search's Solr-compatible HTTP Interface</h1>\n\n<p>One of the nice things about Riak Search is its Solr-compatible HTTP interface.\nSo far, you were only able to use Riak Search through MapReduce. New in release\n1.3 of the Python client is support to directly index and query documents using\nRiak Search's HTTP interface.</p>\n\n<p>The upside is that you can use Riak Search with a Python app as a scalable\nfull-text search without having to store data in Riak KV for them to be indexed.</p>\n\n<p>The interface is as simple as it is straight forward, we've added a new method\nto the RiakClient class called <code>solr()</code> that returns a small fa√ßade object. That\nin turn allows you to interact with the Solr interface, e.g. to add documents to\nthe index:</p>\n\n<p>You just specify an index and a document, which must contain a key-value pair\nfor the id, and that's it.</p>\n\n<p>The beauty about using the Solr interface is that you can use all the available\nparameters for sorting, limiting result sets and setting default fields to query\non, without having to do that with a set of reduce functions.</p>\n\n<p>Be sure to check our documentation for the full set of supported parameters.\nJust pass in a set of keyword arguments for all valid parameters.</p>\n\n<p>Something else that's new on the search integration front is the ability to\nprogrammatically enable and disable indexing on a bucket by installing or\nremoving the relevant pre-commit hook.</p>\n\n<h1>Storing Large Files With Luwak</h1>\n\n<p>When building <a href=\"http://github.com/basho/riagi\">Riagi</a>, the application showcased\nin the recent <a href=\"/2011/08/03/Follow-Up-To-Riak-And-Python-Webinar/\">webinar</a>, I\nmissed Luwak support in the Python client.\n<a href=\"http://wiki.basho.com/Luwak.html\">Luwak</a> is Riak's way of storing large files,\nchunked into smaller bits and stored across your Riak cluster. So we added it.\nThe API consists of three simple functions, <code>store_file</code>, <code>get_file</code>, and\n<code>delete_file</code>.</p>\n\n<h1>Connection Caching for Protocol Buffers and HTTP</h1>\n\n<p>Thanks to the fine folks at <a href=\"http://formspring.com\">Formspring</a> the Python\nclient now sports easier ways to reuse protocol buffer and even HTTP\nconnections, and to make their use more efficient. All of them are useful if\nyou're doing lots of requests or want to reuse connections across several\nrequests, e.g. in the context of a single web request.</p>\n\n<p>Here's a summary of the new transports added in the new release, all of them\naccept the same parameters as the original transport classes for HTTP and PBC:</p>\n\n<ul>\n<li><p><code>riak.transports.pbc.RiakPbcCachedTransport</code>\nA cache that reuses a set of protocol buffer connections. You can set a\nboundary of connections kept in the cache by specifying a <code>maxsize</code> attribute\nwhen creating the object.</p></li>\n<li><p><code>riak.transports.http.RiakHttpReuseTransport</code>\nThis transport is more efficient when reusing HTTP connections by setting\n<code>SO_REUSEADDR</code> on the underlying TCP socket. That allows the TCP stack to\nreuse connections before the <code>TIME_WAIT</code> state has passed.</p></li>\n<li><p><code>riak.transports.http.RiakHttpPoolTransport</code>\nUse the urllib3 connection pool to pool connections to the same host.</p></li>\n</ul>\n\n\n<p>To learn more about Riak and Python, check out the <a href=\"/2011/08/03/Follow-Up-To-Riak-And-Python-Webinar/\">recent\nwebinar</a>, our <a href=\"https://github.com/basho/riak-python-client\">Riak client\nfor Python</a>, and\n<a href=\"http://github.com/basho/riagi\">Riagi</a>, a Django application using Riak and\nRiak Search to store files, sessions, and general metadata. We're always looking\nfor contributors to the Python client, so keep those pull requests coming!</p>\n\n<p>-- <a href=\"http://twitter.com/roidrage\">Mathias</a></p>\n",
  "isoTimestamp": "2011-08-04T07:00:00.000Z",
  "_id": "2011-08-04T07:00:00.000Z-basho blog",
  "site": {
    "feed": "http://blog.basho.com/feed/index.xml",
    "author": "Basho Technologies",
    "link": "http://blog.basho.com"
  },
  "displayDate": "Aug 4 2011"
}